// Generated by CoffeeScript 1.6.3
(function() {
  var accounting_settings, articleHelper, cartItemHelper, current_product, data, debuggerHelper, extend, include, kauApp, kauCart, products;

  products = [
    {
      id: 1,
      name: "Sterntaufe",
      price: 39.0,
      tax: 19.0,
      star_picture: false,
      aluFramePrice: 15.0
    }, {
      id: 2,
      name: "Sternbild",
      price: 59.0,
      tax: 19.0,
      star_picture: true,
      aluFramePrice: 15.0
    }, {
      id: 3,
      name: "Doppelstern",
      price: 79.0,
      tax: 19.0,
      star_picture: true,
      double_fulfillment: true,
      aluFramePrice: 15.0
    }
  ];

  current_product = {
    id: 1,
    sum_price: function() {
      return console.log("ups");
    }
  };

  accounting_settings = {
    symbol: "â‚¬",
    format: "%v %s",
    decimal: ",",
    thousand: ".",
    precision: 2
  };

  data = {
    products: products,
    current_product: current_product
  };

  /* --------------------------------------------
       Begin helpers.coffee
  --------------------------------------------
  */


  extend = function(obj, mixin) {
    var method, name;
    for (name in mixin) {
      method = mixin[name];
      obj[name] = method;
    }
    return obj;
  };

  include = function(klass, mixin) {
    return extend(klass.prototype, mixin);
  };

  debuggerHelper = {
    debugMsg: function(msg) {
      return console.log(msg);
    }
  };

  /* --------------------------------------------
       Begin cart.coffee
  --------------------------------------------
  */


  cartItemHelper = {
    remove: function() {
      return console.log(this);
    }
  };

  kauCart = (function() {
    function kauCart(cart_list) {
      this.cart_list = new Array;
      if (cart_list) {
        this.cart_list = cart_list;
        this.clearance();
      }
    }

    kauCart.prototype.add = function(product, price, quantity) {
      var cart_item;
      if (quantity == null) {
        quantity = 1;
      }
      cart_item = {
        product: product,
        price: price,
        quantity: quantity
      };
      extend(cart_item, cartItemHelper);
      $.observable(this.cart_list).insert(cart_item);
      return this.debugMsg("added " + quantity + " " + product + " with " + price);
    };

    kauCart.prototype.remove = function(pos) {
      $.observable(this.cart_list).remove(pos);
      return this.debugMsg("deletes position " + pos + " from cart");
    };

    kauCart.prototype.clear = function() {
      $.observable(this.cart_list).remove(0, this.cart_list.length - 1);
      return this.debugMsg("clears cart - removes all products");
    };

    kauCart.prototype.items = function() {
      this.debugMsg("returns all products in the cart");
      return this.cart_list;
    };

    kauCart.prototype.calc_net_total = function() {
      var cart_item, index, net, _ref;
      net = 0.0;
      _ref = this.cart_list;
      for (index in _ref) {
        cart_item = _ref[index];
        if (!cart_item.product) {
          break;
        }
        net = net + (cart_item.price / (100 + cart_item.product.tax) * 100) * cart_item.quantity;
      }
      this.debugMsg("returns the net total " + net + " of the cart");
      return $.observable(this).setProperty("net_total", net);
    };

    kauCart.prototype.calc_gross_total = function() {
      var cart_item, gross, index, _ref;
      gross = 0.0;
      _ref = this.cart_list;
      for (index in _ref) {
        cart_item = _ref[index];
        if (!cart_item.product) {
          break;
        }
        gross = gross + cart_item.price * cart_item.quantity;
      }
      this.debugMsg("returns the gross total " + gross + " of the cart");
      return $.observable(this).setProperty("gross_total", gross);
    };

    kauCart.prototype.calc_tax_total = function() {
      var tax;
      tax = parseFloat(this.gross_total) - parseFloat(this.net_total);
      this.debugMsg("returns the tax total " + tax + " of the cart");
      return $.observable(this).setProperty("tax_total", tax);
    };

    kauCart.prototype.clearance = function() {
      this.calc_net_total();
      this.calc_gross_total();
      return this.calc_tax_total();
    };

    kauCart.prototype.total_unique_items = function() {
      return this.cart_list.length;
    };

    return kauCart;

  })();

  include(kauCart, debuggerHelper);

  /* --------------------------------------------
       Begin article.coffee
  --------------------------------------------
  */


  articleHelper = {
    sum: function() {
      var sum;
      sum = this.price;
      if (this.aluFrame) {
        sum = sum + this.aluFramePrice;
      }
      $.observable(this).setProperty("gross_sum", sum);
      return sum;
    }
  };

  /* --------------------------------------------
       Begin view.converters.coffee
  --------------------------------------------
  */


  $.views.converters("formatMoney", function(val) {
    return accounting.formatMoney(val, accounting_settings);
  });

  /* --------------------------------------------
       Begin app.coffee
  --------------------------------------------
  */


  /* --------------------------------------------
       Begin shopping-cart-app.coffee
  --------------------------------------------
  */


  kauApp = (function() {
    function kauApp(data) {
      var cart, cartItemTmpl, cartSumTmpl, current_productTmpl,
        _this = this;
      this.data = data;
      this.current_product = this.find_product_by_id(data.current_product.id);
      if ($.jStorage.get("current_product")) {
        this.debugMsg("loaded current product via local storage");
        this.current_product = $.jStorage.get("current_product");
      }
      this.debugMsg(this.current_product);
      extend(this.current_product, articleHelper);
      $(this.current_product).on("propertyChange", function(ev, eventArgs) {
        return _this.current_product.sum();
      });
      $(this.current_product).on("propertyChange", function(ev, eventArgs) {
        _this.debugMsg("saving...current_product");
        return _this.debugMsg($.jStorage.set("current_product", _this.current_product));
      });
      if ($.jStorage.get("cart_list")) {
        this.debugMsg("loaded cart via local storage");
        cart = new kauCart($.jStorage.get("cart_list"));
      } else {
        cart = new kauCart();
      }
      $.observe(cart.items(), function(ev, eventArgs) {
        cart.clearance();
        _this.debugMsg("saving...cart");
        return _this.debugMsg($.jStorage.set("cart_list", cart.items()));
      });
      cartItemTmpl = $.templates("#cartItemTmpl");
      cartItemTmpl.link("#cartItems", cart.items()).on("click", ".remove_item", function() {
        var view;
        view = $.view(this);
        return $.observable(cart.items()).remove(view.index);
      });
      current_productTmpl = $.templates("#current_productTmpl");
      current_productTmpl.link("#current_product", this.current_product).on("click", "#add_to_cart", function() {
        var newObject;
        newObject = jQuery.extend(true, {}, _this.current_product);
        return cart.add(newObject, newObject.sum());
      });
      cartSumTmpl = $.templates("#cartSumTmpl");
      cartSumTmpl.link("#cartSum", cart);
    }

    kauApp.prototype.set_current_product = function(new_id) {
      var product;
      product = this.find_product_by_id(new_id);
      return $.observable(this.current_product).setProperty(product);
    };

    kauApp.prototype.find_product_by_id = function(id) {
      return $.grep(data.products, function(e) {
        return e.id === id;
      })[0];
    };

    return kauApp;

  })();

  include(kauApp, debuggerHelper);

  $(function() {
    var cartApp;
    cartApp = new kauApp(data);
    return cartApp.set_current_product(2);
  });

}).call(this);
